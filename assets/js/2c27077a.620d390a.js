"use strict";(self.webpackChunknanocosomos_documentation=self.webpackChunknanocosomos_documentation||[]).push([[3452],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var c=t(96540);const i={},o=c.createContext(i);function r(e){const n=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(o.Provider,{value:n},e.children)}},88857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"webrtc/nanostream_webrtc_reconnect","title":"Automatic Reconnection","description":"Webcaster API includes an automatic reconnection feature, designed to resume broadcasting after unintentional disconnections. This functionality is essential for maintaining a high-quality viewer experience during network instability or changes.","source":"@site/docs/webrtc/nanostream_webrtc_reconnect.md","sourceDirName":"webrtc","slug":"/webrtc/nanostream_webrtc_reconnect","permalink":"/docs/webrtc/nanostream_webrtc_reconnect","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751618628000,"frontMatter":{"id":"nanostream_webrtc_reconnect","title":"Automatic Reconnection","sidebar_label":"Automatic Reconnection"},"sidebar":"nanoStream Webcaster","previous":{"title":"Speech / Music Streaming","permalink":"/docs/webrtc/nanostream_webrtc_speech_music"},"next":{"title":"Latest","permalink":"/docs/webrtc/nanostream_webrtc_release_latest"}}');var i=t(74848),o=t(28453);const r={id:"nanostream_webrtc_reconnect",title:"Automatic Reconnection",sidebar_label:"Automatic Reconnection"},s=void 0,a={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Notice When a Reconnect Occurs",id:"notice-when-a-reconnect-occurs",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Webcaster API includes an automatic reconnection feature, designed to resume broadcasting after unintentional disconnections. This functionality is essential for maintaining a high-quality viewer experience during network instability or changes."}),"\n",(0,i.jsx)(n.p,{children:"Upon activation, this feature initiates a reconnection attempt under these circumstances:"}),"\n",(0,i.jsx)(n.p,{children:"Network Alteration:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"On mobile platforms, such as during transitions from Wi-Fi to cellular data"}),"\n",(0,i.jsx)(n.li,{children:"When moving across different Wi-Fi networks"}),"\n",(0,i.jsx)(n.li,{children:"Short-term disruptions in the broadcaster's internet connection"}),"\n",(0,i.jsx)(n.li,{children:"Sudden network-related complications"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Read how to be notified of a reconnect ",(0,i.jsx)(n.a,{href:"#notice-when-a-reconnect-occurs",children:"below"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Initiating automatic reconnection involves including the ",(0,i.jsx)(n.strong,{children:"reconnect"})," option within the Webcaster configuration object."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"reconnect: true"}),": This setting activates automatic reconnection with predetermined configurations:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"{\n  minDelaySec: 2,\n  maxDelaySec: 15,\n  maxRetries: 10\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Configuration"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"reconnect.minDelaySec"}),": Minimum amount of seconds to wait before attempting a reconnect after connection loss. Minimum value: 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"reconnect.maxDelaySec"}),": Maximum amount of seconds to wait before attempting a reconnect after connection loss. Minimum value: 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"reconnect.maxRetries"}),": Maximum amount of reconnect attempts. Minimum value: 1."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Recommended Configuration",type:"caution",children:(0,i.jsx)(n.p,{children:"For effective reconnection execution, it is advised to set the total reconnection delay to exceed 1 minute. This strategy accommodates DNS record Time-To-Live (TTL) adjustments."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const webcaster = new window.WebcasterApiV6.Webcaster({\n    reconnect: {\n      minDelaySec: 2,\n      maxDelaySec: 15,\n      maxRetries: 10\n    }\n    streamName: '<STREAM-NAME-1>'\n});\n\nawait webcaster.setup()\nawait webcaster.startBroadcast()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"notice-when-a-reconnect-occurs",children:"Notice When a Reconnect Occurs"}),"\n",(0,i.jsxs)(n.p,{children:["To monitor the status of the reconnection process, the Webcaster API provides an ",(0,i.jsx)(n.code,{children:"onReconnectionStateChange"})," callback, which is invoked with a ",(0,i.jsx)(n.code,{children:"ReconnectionState"})," argument."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"webcaster.onReconnectionStateChange = (newState: ReconnectionState) => {\n  console.log(newState);\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ReconnectionState"})," indicates the current state of the reconnection process. Possible values:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"idle"}),": The initial state indicating no current activity in the reconnection process."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"reconnecting"}),": Connection has failed and a reconnection attempt is underway."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"failed"}),": Reconnection process has reached the retry limit and has stopped attempting to reconnect. To start a new broadcast instance, ",(0,i.jsx)(n.code,{children:"recover"})," should be called first."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);