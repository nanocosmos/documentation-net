"use strict";(self.webpackChunknanocosomos_documentation=self.webpackChunknanocosomos_documentation||[]).push([[1831],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},46548:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"webrtc/nanostream_webrtc_stats_and_metrics","title":"Stats and Metrics","description":"The Webcaster API offers two Quality of Service reporting mechanisms for monitoring the performance of your webcasts:","source":"@site/docs/webrtc/nanostream_webrtc_stats_and_metrics.md","sourceDirName":"webrtc","slug":"/webrtc/nanostream_webrtc_stats_and_metrics","permalink":"/docs/webrtc/nanostream_webrtc_stats_and_metrics","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751618628000,"frontMatter":{"id":"nanostream_webrtc_stats_and_metrics","title":"Stats and Metrics","sidebar_label":"Stats and Metrics"},"sidebar":"nanoStream Webcaster","previous":{"title":"Audio-Only / Video-Only","permalink":"/docs/webrtc/nanostream_webrtc_audio_video_only"},"next":{"title":"Speech / Music Streaming","permalink":"/docs/webrtc/nanostream_webrtc_speech_music"}}');var i=t(74848),r=t(28453);const c={id:"nanostream_webrtc_stats_and_metrics",title:"Stats and Metrics",sidebar_label:"Stats and Metrics"},o=void 0,a={},l=[{value:"Client-side emitted metrics",id:"client-side-emitted-metrics",level:3},{value:"Ingest Quality Indicators",id:"ingest-quality-indicators",level:3},{value:"Traffic Light Recommendations",id:"traffic-light-recommendations",level:3},{value:"Round Trip Time",id:"round-trip-time",level:4},{value:"Packet Loss",id:"packet-loss",level:4},{value:"Sample of a simple traffic light implementation:",id:"sample-of-a-simple-traffic-light-implementation",level:4},{value:"Sending Metrics to Our Backend",id:"sending-metrics-to-our-backend",level:2},{value:"Metrics Configuration",id:"metrics-configuration",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Webcaster API offers two Quality of Service reporting mechanisms for monitoring the performance of your webcasts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#client-side-emitted-metrics",children:"Client-side emitted metrics"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sending-metrics-to-our-backend",children:"Sending Metrics to Our Backend"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"client-side-emitted-metrics",children:"Client-side emitted metrics"}),"\n",(0,i.jsxs)(n.p,{children:["You can receive client-side metrics on an interval,\nNote: Metrics indicating an error would be output regardless of the interval.\nFor a comprehensive list of metrics, please refer to the ",(0,i.jsx)(n.a,{href:"/docs/webrtc/nanostream_webrtc_api",children:"Webcaster API docs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const webcaster = new window.WebcasterApiV6.Webcaster({\n  streamName: '<STREAM-NAME-1>'\n});\n\nwebcaster.onMetrics = (metrics) => {\n    console.log(metrics);\n\n    // Check if the metric contains error information\n    if (metrics.errorMessage) {\n        console.log(metrics.errorMessage, metrics.errorCode);\n    }\n};\n\nawait webcaster.setup();\n\n// Will also start emitting metrics at an interval\nawait webcaster.startBroadcast();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ingest-quality-indicators",children:"Ingest Quality Indicators"}),"\n",(0,i.jsx)(n.p,{children:"Detecting and addressing poor network conditions is crucial for ensuring a good end-to-end user experience. Specific statistics indicate the current upstream quality:"}),"\n",(0,i.jsx)(n.p,{children:"There are specific stats that indicate the current upstream quality:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RTT (Round Trip Time)"})," - The current time in milliseconds that data takes from the client to the webcaster server and back."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Packet loss"})," - The percentage of packets lost during the past 10 seconds."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Send Delay"})," (Chromium-based browsers only) - The delay before video frames are sent to the server."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These statistics enable you to display  ",(0,i.jsx)(n.strong,{children:"traffic lights"})," to your webcasters, indicating the current ingest quality and network conditions from your customers' browsers to our webcast servers."]}),"\n",(0,i.jsx)(n.h3,{id:"traffic-light-recommendations",children:"Traffic Light Recommendations"}),"\n",(0,i.jsx)(n.p,{children:"We have gathered recommendations for indicating poor streaming conditions to end users based on our analysis:"}),"\n",(0,i.jsx)(n.h4,{id:"round-trip-time",children:"Round Trip Time"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An RTT of 150 milliseconds or less is considered acceptable and may result in a good playback experience."}),"\n",(0,i.jsx)(n.li,{children:"Above 150 and below 250 milliseconds, viewer experience may degrade slightly."}),"\n",(0,i.jsx)(n.li,{children:"Above 250 milliseconds, users should check their network for improvements."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"packet-loss",children:"Packet Loss"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Packet loss of less than 5% generally results in a good playback experience."}),"\n",(0,i.jsx)(n.li,{children:"Packet loss exceeding 10%, especially for streams with higher bitrates (2Mb and above), can degrade viewer experience."}),"\n",(0,i.jsx)(n.li,{children:"Beyond 10% packet loss, streams can become chunky, and users should take action."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"sample-of-a-simple-traffic-light-implementation",children:"Sample of a simple traffic light implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const webcaster = new window.WebcasterApiV6.Webcaster({\n  streamName: '<STREAM-NAME-1>'\n});\n\nwebcaster.onMetrics = (metrics) => {\n    console.log(metrics);\n\n    const rtcstats = metrics.rtcstats;\n    const connectionRtt = rtcstats.connection.rtt.value;\n    const packetLoss = rtcstats.connection.packetLoss.value;\n\n    if (!connectionRtt || !packetLoss) {\n        return // values can be undefined\n    };\n\n    // thresholds\n    let quality = 'good';\n    const packetLossLowerBound = 5;\n    const packetLossUpperBound = 10;\n    const rttLowerBound = 150;\n    const rttUpperBound = 250;\n\n    if (packetLoss < packetLossLowerBound && connectionRtt < rttLowerBound) {\n        quality = 'good';\n    }\n\n    if ((packetLoss > packetLossLowerBound && packetLoss < packetLossUpperBound)\n        || (connectionRtt > rttLowerBound && connectionRtt < rttUpperBound)) {\n        quality = 'medium';\n    }\n\n    if (packetLoss > packetLossUpperBound || connectionRtt > rttUpperBound) {\n        quality = 'bad';\n    }\n\n    console.log('roundTripTime: ', connectionRtt);\n    console.log('packetLoss: ', packetLoss);\n    console.log('quality: ', quality);\n};\n\nawait webcaster.setup()\n\nawait webcaster.startBroadcast()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sending-metrics-to-our-backend",children:"Sending Metrics to Our Backend"}),"\n",(0,i.jsxs)(n.p,{children:["Sending metrics to our backend is useful for analyzing webcast ingest quality and tracking client-side issues. It also provides valuable information in the Analytics Dashboard. Refer to the ",(0,i.jsx)(n.a,{href:"../cloud/analytics#webcaster",children:"nanoStream Cloud"})," for details on enabling client metrics for your organization."]}),"\n",(0,i.jsx)(n.h3,{id:"metrics-configuration",children:"Metrics Configuration"}),"\n",(0,i.jsx)(n.p,{children:"To configure sending metrics from clients, set your accountId and accountKey in the constructor's config object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const webcaster = new window.WebcasterApiV6.Webcaster({\n    streamName: '<STREAM-NAME-1>',\n    metrics: {\n        accountId: 'myAccountId',\n        accountKey: 'myAccountKey'\n    }\n});\n\nawait webcaster.setup()\nawait webcaster.startBroadcast()\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);