"use strict";(self.webpackChunknanocosomos_documentation=self.webpackChunknanocosomos_documentation||[]).push([[6727],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const c={},r=o.createContext(c);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},58605:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"webrtc-v5/nanostream_webrtc_reconnect","title":"Automatic Reconnection","description":"This feature allows configuration of the reconnection behaviour on API level.","source":"@site/docs/webrtc-v5/nanostream_webrtc_reconnect.md","sourceDirName":"webrtc-v5","slug":"/webrtc-v5/nanostream_webrtc_reconnect","permalink":"/docs/webrtc-v5/nanostream_webrtc_reconnect","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752847376000,"frontMatter":{"id":"nanostream_webrtc_reconnect","title":"Automatic Reconnection","sidebar_label":"Automatic Reconnection"},"sidebar":"nanoStream Webcaster V5","previous":{"title":"Stats and Metrics","permalink":"/docs/webrtc-v5/nanostream_webrtc_stats_and_metrics"},"next":{"title":"Webcaster","permalink":"/docs/webrtc-v5/nanostream_webrtc_api"}}');var c=t(74848),r=t(28453);const i={id:"nanostream_webrtc_reconnect",title:"Automatic Reconnection",sidebar_label:"Automatic Reconnection"},s=void 0,a={},l=[{value:"Automatic Reconnection Configuration",id:"automatic-reconnection-configuration",level:2},{value:"Notice when a reconnect happens",id:"notice-when-a-reconnect-happens",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:"This feature allows configuration of the reconnection behaviour on API level.\nOnce the webcaster will register any connection loss, it will attempt to reconnect the current webcast."}),"\n",(0,c.jsx)(n.p,{children:"When enabled, the feature will trigger a reconnect attempt in one of the following cases:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Change of network:","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"On mobile devices, e.g. when switching from wifi to mobile network"}),"\n",(0,c.jsx)(n.li,{children:"Switching between multiple wifi endpoints"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.li,{children:"Broadcaster\u2019s brief internet interruptions"}),"\n",(0,c.jsx)(n.li,{children:"Unexpected issues on the network side"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["You will be notified through the ",(0,c.jsx)(n.a,{href:"./nanostream_webrtc_api#broadcaststatus",children:"BroadcastStatus"})," Event once a reconnection takes place.\nPlease read on how to get notified about a reconnect ",(0,c.jsx)(n.a,{href:"#notice-when-a-reconnect-happens",children:"below"}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"automatic-reconnection-configuration",children:"Automatic Reconnection Configuration"}),"\n",(0,c.jsxs)(n.p,{children:["To enable the feature, the ",(0,c.jsx)(n.a,{href:"./nanostream_webrtc_api#rtcusersetconfigconfig",children:"setConfig()"})," API call now provides additional options:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"reconnect.minDelay:"})," Minimum amount of seconds to wait before attempting a reconnect after connection loss"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"reconnect.maxDelay:"})," Maximum amount of seconds to wait before attempting a reconnect after connection loss"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"reconnect.maxRetries:"})," Maximum amount reconnect attempts, setting this to an integer greater than 0 will enable the reconnect feature"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// add reconnection settings to your config\nvar config = {\n  reconnect: {\n    minDelay: 2,\n    maxDelay: 8,\n    maxRetries: 10\n  }\n};\n\nrtcuser.setConfig(config);\n"})}),"\n",(0,c.jsx)(n.h2,{id:"notice-when-a-reconnect-happens",children:"Notice when a reconnect happens"}),"\n",(0,c.jsxs)(n.p,{children:["A reconnect will be notified through the ",(0,c.jsx)(n.a,{href:"./nanostream_webrtc_api#broadcaststatus",children:"BroadcastStatus"})," Event."]}),"\n",(0,c.jsxs)(n.p,{children:["Connection loss (from client to server) is notified with a status of ",(0,c.jsx)(n.strong,{children:"'reconnecting_broadcast'"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"rtcuser.on('BroadcastStatus', function(event) {\n\n  if(event.data && event.data.message === 'reconnecting_broadcast') {\n    console.log('Broadcast is reconnecting');\n  }\n  \n  // the status (event.data.message) will be one of:\n\n  // 'signalling': a connection is being established\n  // 'connected': the stream has connected to the server successfully\n  // 'broadcasting': the broadcast is running\n  // 'reconnecting_broadcast': the client is reconnecting\n  // 'reconnecting': the RTMP connection is reconnecting on server side\n    \n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);